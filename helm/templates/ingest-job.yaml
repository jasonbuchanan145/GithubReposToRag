apiVersion: batch/v1
kind: Job
metadata:
  name: ingest-repos
spec:
  template:
    spec:
      restartPolicy: Never
      ## --- wait here -----------------------------------------------------
      initContainers:
        - name: wait-for-cassandra
          image: busybox:1.36
          command:
            - sh
            - -c
            - |
              echo "‚è≥ waiting for Cassandra ..."
              max_attempts=30
              attempt=0
              # Create a simple netcat check for basic connectivity
              while [ $attempt -lt $max_attempts ]; do
                if nc -z -w 5 {{ printf "%s-cassandra" .Release.Name }} 9042; then
                  echo "‚úÖ Cassandra port is reachable. Checking service readiness..."
                  # Additional 10 seconds wait for Cassandra to fully initialize after port is available
                  sleep 10
                  echo "‚úÖ Cassandra should be ready now"
                  exit 0
                fi
                attempt=$((attempt+1))
                echo "Attempt $attempt of $max_attempts. Waiting for Cassandra to be ready..."
                sleep 10
              done
              echo "‚ùå Cassandra failed to become ready within the timeout period"
              exit 1
        {{- if .Values.sharedData.enabled }}
        - name: check-data-exists
          image: busybox:1.36
          command:
            - sh
            - -c
            - |
              echo "Checking if previous data exists..."
              if [ -f "/data/.ingest_complete" ]; then
                echo "‚úÖ Previous ingestion data found. Skipping ingestion."
                # Create a flag file to signal the main container to skip ingestion
                touch /data/.skip_ingest
              else
                echo "üîÑ No previous ingestion data found. Will proceed with ingestion."
              fi
          volumeMounts:
            - name: shared-data
              mountPath: "/data"
        {{- end }}
      ## -------------------------------------------------------------------

      containers:
        - name: ingest
          image: "{{ .Values.ingestjob.image }}"
          imagePullPolicy: {{ .Values.ingestjob.imagePullPolicy | default "IfNotPresent" }}
          env:
            - name: CASSANDRA_HOST
              value: "{{ .Release.Name }}-cassandra"
            - name: CASSANDRA_PORT
              value: "9042"
            - name: CASSANDRA_USERNAME
              value: "{{ .Values.cassandra.auth.username }}"
            - name: CASSANDRA_PASSWORD
              value: "{{ .Values.cassandra.auth.password }}"
            - name: CASSANDRA_KEYSPACE
              value: "vector_store"
            - name: PUSHGATEWAY_ADDRESS
              value: "{{ printf "%s:%v" .Values.metrics.prometheus_gateway.host .Values.metrics.prometheus_gateway.port }}"


            - name: GITHUB_TOKEN
              valueFrom:
                secretKeyRef:
                  name: github-token
                  key: token
            - name: GITHUB_USER
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-github-config
                  key: GITHUB_USER
            - name: QWEN_MODEL
              value: {{ .Values.qwen.model | quote }}
            - name: ALLOW_THINKING
              value: {{ .Values.ingestjob.allowThinking | quote}}
            {{- if .Values.sharedData.enabled }}
            - name: DATA_DIR
              value: "{{ .Values.sharedData.mountPath }}"
            {{- end }}
          {{- if .Values.sharedData.enabled }}
          volumeMounts:
            - name: shared-data
              mountPath: "{{ .Values.sharedData.mountPath }}"
          {{- end }}
      {{- if .Values.sharedData.enabled }}
      volumes:
        - name: shared-data
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-shared-data-pvc
      {{- end }}
