replicaCount: 1

cassandra:
  dbUser:
    user: "cassandra"
    password: "testyMcTesterson"
    forcePassword: true
  # Increase initial timeout for schema creation with LlamaIndex
  image:
    registry: docker.io
    repository: bitnami/cassandra
    tag: 5.0.3-debian-12-r6
    pullPolicy: IfNotPresent
  auth:
    enabled: true
    username: cassandra
    password: "testyMcTesterson"
  resources:
    limits:
      cpu: 2
      memory: 4Gi
    requests:
      cpu: 0.5
      memory: 2Gi
  persistence:
    enabled: true
    size: 8Gi
    storageClass: "standard"
  extraEnvVars:
    - name: CASSANDRA_HEAP_NEWSIZE
      value: "128M"
    - name: CASSANDRA_MAX_HEAP_SIZE
      value: "1024M"
  startupProbe:
    # Use TCP socket check instead of exec for faster, more reliable startup detection
    enabled: true
    # Check actual CQL port which becomes available earlier than JMX
    tcpSocket:
      port: 9042
    # Don't check for exec command - let's use the TCP socket check
    exec: null
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 15  # 150 seconds (2.5 minutes) total time after initialDelay
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 10
    failureThreshold: 6
    successThreshold: 1
  livenessProbe:
    enabled: true
    initialDelaySeconds: 180
    periodSeconds: 30
    timeoutSeconds: 30
    failureThreshold: 5
    successThreshold: 1
  service:
    ports:
      cql: 9042
  initDBConfigMap: "cassandra-initdb"

qwen:
  model: "Qwen/Qwen2.5-Coder-7B-Instruct-AWQ"
  gpu: true
  # Increase GPU memory utilization to fit larger KV cache
  gpuMemoryUtilization: 0.85
  # Limit context window to fit available KV cache memory
  # maxModelLen: 16384
  # Limit context window to fit available KV cache memory
  maxModelLen: 11712
image:
  pullPolicy: IfNotPresent
ingestjob:
  image: rag-ingest:latest
  imagePullPolicy: Never
  allowThinking: false

ragapi:
  image: rag-api:latest
  imagePullPolicy: IfNotPresent

# GitHub configuration
github:
  user: "jasonbuchanan145"  # Default GitHub user - can be overridden

env:
  QWEN_ENDPOINT: "http://qwen:8000"
  CASSANDRA_HOST: "rag-demo-cassandra"
  CASSANDRA_PORT: "9042"
  CASSANDRA_USERNAME: cassandra
  CASSANDRA_PASSWORD: cassandra
  CASSANDRA_KEYSPACE: vector_store
  REDIS_URL: "redis://:changeme@rag-demo-redis-master:6379/0"
  MAX_RAG_ATTEMPTS: "3"
  MIN_SOURCE_NODES: "1"

redis:
  enabled: true
  architecture: standalone
  auth:
    enabled: true
    password: changeme
  master:
    persistence:
      enabled: false  # fine for learning

worker:
  enabled: true
  replicas: 1
  command: ["arq", "app.worker.WorkerSettings"]


# Shared data volume for repository data and summaries
sharedData:
  # Enable persistent volume for repo data
  enabled: true
  hostPath: "/tmp/rag-demo-data"
  size: 10Gi
  mountPath: "/data"
  storageClass: "standard"

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""
metrics:
  prometheus_gateway:
    host: rag-demo-prometheus-pushgateway
    port: 9091
# Prometheus chart values
prometheus:
  enabled: true
  alertmanager:
    enabled: false
  pushgateway:
    enabled: true
  server:
    # Use NodePort=false (ClusterIP); we access via kubectl port-forward if needed
    service:
      type: ClusterIP
    # Explicit scrape configuration to honor prometheus.io/* annotations on Services
    serverFiles:
      prometheus.yml: |-
        global:
          scrape_interval: 15s
          evaluation_interval: 15s
        scrape_configs:
          # Discover annotated Services and scrape their Endpoints
          - job_name: 'kubernetes-services'
            kubernetes_sd_configs:
              - role: endpoints
            relabel_configs:
              - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
                action: keep
                regex: "true"
              - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
                action: replace
                target: __scheme__
                regex: (https?)
              - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
                action: replace
                target: __metrics_path__
                regex: (.+)
              - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
                action: replace
                target: __address__
                regex: (.+?)(?::\d+)?;(\d+)
                replacement: $1:$2
              - action: labelmap
                regex: __meta_kubernetes_service_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                action: replace
                target: namespace
              - source_labels: [__meta_kubernetes_service_name]
                action: replace
                target: service
    # Keep resources low for local Minikube
    resources:
      requests:
        cpu: 100m
        memory: 256Mi